<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>League of Legends Quiz</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Arial', sans-serif;
            cursor: none;
        }

        body {
            background: 
                radial-gradient(circle at 30% 20%, rgba(200, 155, 60, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 70% 80%, rgba(67, 183, 255, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 20% 70%, rgba(147, 39, 143, 0.12) 0%, transparent 50%),
                radial-gradient(circle at 80% 30%, rgba(255, 215, 0, 0.08) 0%, transparent 70%),
                linear-gradient(135deg, #0a1428 0%, #1a1f2e 20%, #2d1b69 40%, #1e2328 60%, #3c3c41 80%, #0a1428 100%);
            background-size: 150% 150%, 120% 120%, 180% 180%, 200% 200%, 100% 100%;
            background-animation: gradientShift 20s ease-in-out infinite;
            position: relative;
            overflow: hidden;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 0%, 100% 100%, 0% 100%, 100% 0%, 0% 0%; }
            33% { background-position: 100% 0%, 0% 100%, 100% 100%, 0% 0%, 50% 50%; }
            66% { background-position: 0% 100%, 100% 0%, 0% 0%, 100% 100%, 100% 0%; }
        }

        /* Custom cursor */
        .cursor {
            position: fixed;
            width: 20px;
            height: 20px;
            background: radial-gradient(circle, rgba(200, 155, 60, 0.8) 0%, rgba(200, 155, 60, 0.2) 70%, transparent 100%);
            border-radius: 50%;
            pointer-events: none;
            z-index: 10000;
            transition: transform 0.1s ease;
            box-shadow: 0 0 20px rgba(200, 155, 60, 0.6);
        }

        /* League Title */
        #league-title {
            position: fixed;
            top: 10vh;
            left: 50%;
            transform: translateX(-50%);
            z-index: 101;
            pointer-events: none;
            text-align: center;
        }

        .league-text {
            font-family: 'Cinzel', 'Times New Roman', serif;
            font-size: 4.5rem;
            font-weight: 900;
            margin: 0;
            position: relative;
            z-index: 2;
            
            /* Enhanced League Gold Gradient */
            background: linear-gradient(
                135deg,
                #4B3621 0%,
                #8B6914 10%,
                #B8860B 20%,
                #DAA520 30%,
                #FFD700 40%,
                #FFF8DC 50%,
                #FFD700 60%,
                #DAA520 70%,
                #B8860B 80%,
                #8B6914 90%,
                #4B3621 100%
            );
            background-size: 200% 200%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            
            /* Enhanced 3D text effect */
            text-shadow: 
                0 1px 0 #C89B3C,
                0 2px 0 #B5853A,
                0 3px 0 #A26F38,
                0 4px 0 #8F5936,
                0 5px 0 #7C4334,
                0 6px 0 #693032,
                0 7px 0 #562030,
                0 8px 0 #43102E,
                0 9px 0 #30002C,
                0 10px 20px rgba(0, 0, 0, 0.9),
                0 0 40px rgba(218, 165, 32, 0.5),
                0 0 60px rgba(218, 165, 32, 0.3),
                0 0 80px rgba(218, 165, 32, 0.2);
            
            letter-spacing: 4px;
            text-transform: uppercase;
            animation: 
                goldFlow 4s ease-in-out infinite,
                titleFloat 6s ease-in-out infinite,
                letterSpacing 8s ease-in-out infinite;
        }

        /* Each letter animation */
        .league-text span {
            display: inline-block;
            animation: letterWave 3s ease-in-out infinite;
            animation-delay: calc(var(--i) * 0.1s);
        }

        @keyframes goldFlow {
            0%, 100% {
                background-position: 0% 50%;
                filter: brightness(1) contrast(1);
            }
            50% {
                background-position: 100% 50%;
                filter: brightness(1.2) contrast(1.1);
            }
        }

        @keyframes titleFloat {
            0%, 100% {
                transform: translateY(0) scale(1);
            }
            25% {
                transform: translateY(-5px) scale(1.02);
            }
            75% {
                transform: translateY(3px) scale(0.98);
            }
        }

        @keyframes letterSpacing {
            0%, 100% {
                letter-spacing: 4px;
            }
            50% {
                letter-spacing: 6px;
            }
        }

        @keyframes letterWave {
            0%, 100% {
                transform: translateY(0) rotateZ(0deg);
            }
            25% {
                transform: translateY(-8px) rotateZ(-2deg);
            }
            75% {
                transform: translateY(5px) rotateZ(2deg);
            }
        }

        /* Glowing particles around title */
        .title-glow {
            position: absolute;
            width: 4px;
            height: 4px;
            background: radial-gradient(circle, #FFD700 0%, transparent 70%);
            border-radius: 50%;
            pointer-events: none;
            animation: glowOrbit 10s linear infinite;
        }

        @keyframes glowOrbit {
            0% {
                transform: rotate(0deg) translateX(150px) rotate(0deg);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                transform: rotate(360deg) translateX(150px) rotate(-360deg);
                opacity: 0;
            }
        }

        /* 3D Models - Simple positioning */
        #model-left {
            position: fixed;
            left: 50px;
            bottom: 50px;
            width: 800px;
            height: 800px;
            z-index: 99;
        }

        #model-right {
            position: fixed;
            right: 50px;
            bottom: 50px;
            width: 800px;
            height: 800px;
            z-index: 99;
        }

        /* League Accept Button */
        #play-button {
            position: fixed;
            top: calc(50% + 5px);
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 102;
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .accept-button, .decline-button {
            position: relative;
            width: 320px;
            height: 100px;
            background: linear-gradient(135deg, #0A1428 0%, #0C1D3D 100%);
            border: 2px solid #0596AA;
            overflow: visible;
            transition: all 0.3s ease;
            clip-path: polygon(
                20px 0%, 
                100% 0%, 
                100% calc(100% - 20px), 
                calc(100% - 20px) 100%, 
                0% 100%, 
                0% 20px
            );
            cursor: pointer;
        }

        .decline-button {
            width: 180px;
            background: linear-gradient(135deg, #1A0A0A 0%, #2D0C0C 100%);
            border: 2px solid #AA0505;
        }

        .decline-button::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, 
                #AA0505 0%, 
                #F40505 25%, 
                #AA0505 50%, 
                #F40505 75%, 
                #AA0505 100%
            );
            background-size: 400% 400%;
            z-index: -2;
            clip-path: polygon(
                20px 0%, 
                100% 0%, 
                100% calc(100% - 20px), 
                calc(100% - 20px) 100%, 
                0% 100%, 
                0% 20px
            );
            animation: borderGlow 3s ease-in-out infinite;
            opacity: 0.6;
        }

        .decline-button::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                transparent 0%, 
                rgba(244, 5, 5, 0.1) 50%, 
                transparent 100%
            );
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .decline-button:hover::after {
            transform: translateX(100%);
        }

        .decline-button .button-inner {
            background: linear-gradient(135deg, #1A0A0A 0%, #2D1010 100%);
        }

        .decline-button .button-text {
            color: #F40505;
            font-size: 24px;
            text-shadow: 
                0 0 10px rgba(244, 5, 5, 0.8),
                0 0 20px rgba(244, 5, 5, 0.5),
                0 0 30px rgba(244, 5, 5, 0.3);
        }

        .decline-button:hover .button-text {
            color: #FF6666;
            text-shadow: 
                0 0 15px rgba(244, 5, 5, 1),
                0 0 30px rgba(244, 5, 5, 0.8),
                0 0 45px rgba(244, 5, 5, 0.6);
        }

        .decline-button .corner-accent {
            border-color: #F40505;
        }

        .decline-button:hover .corner-accent {
            border-color: #FF6666;
            filter: drop-shadow(0 0 5px rgba(244, 5, 5, 1));
        }

        .decline-button:hover {
            transform: scale(1.02);
            filter: brightness(1.1);
        }

        .decline-button:active {
            transform: scale(0.98);
        }

        /* Countdown Circle */
        .countdown-circle {
            position: absolute;
            top: 50%;
            left: -60px;
            transform: translateY(-50%);
            width: 80px;
            height: 80px;
        }

        .countdown-svg {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }

        .countdown-bg {
            fill: none;
            stroke: rgba(5, 150, 170, 0.3);
            stroke-width: 6;
        }

        .countdown-progress {
            fill: none;
            stroke: #05D4F4;
            stroke-width: 6;
            stroke-linecap: round;
            stroke-dasharray: 220;
            stroke-dashoffset: 0;
            animation: countdown 10s linear infinite;
            filter: drop-shadow(0 0 8px rgba(5, 212, 244, 0.8));
        }

        @keyframes countdown {
            0% {
                stroke-dashoffset: 0;
                stroke: #05D4F4;
            }
            50% {
                stroke: #05F4F4;
            }
            80% {
                stroke: #F4A505;
            }
            95% {
                stroke: #F45505;
            }
            100% {
                stroke-dashoffset: 220;
                stroke: #F45505;
            }
        }

        .countdown-number {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-family: 'Arial', sans-serif;
            font-size: 28px;
            font-weight: bold;
            color: #05D4F4;
            text-shadow: 
                0 0 10px rgba(5, 212, 244, 0.8),
                0 0 20px rgba(5, 212, 244, 0.5);
            transition: color 0.3s ease;
        }

        .countdown-number.warning {
            color: #F4A505;
        }

        .countdown-number.danger {
            color: #F45505;
        }

        .accept-button::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, 
                #0596AA 0%, 
                #05D4F4 25%, 
                #0596AA 50%, 
                #05D4F4 75%, 
                #0596AA 100%
            );
            background-size: 400% 400%;
            z-index: -2;
            clip-path: polygon(
                20px 0%, 
                100% 0%, 
                100% calc(100% - 20px), 
                calc(100% - 20px) 100%, 
                0% 100%, 
                0% 20px
            );
            animation: borderGlow 3s ease-in-out infinite;
            opacity: 0.8;
        }

        .accept-button::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, 
                transparent 0%, 
                rgba(5, 212, 244, 0.1) 50%, 
                transparent 100%
            );
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .accept-button:hover::after {
            transform: translateX(100%);
        }

        @keyframes borderGlow {
            0%, 100% {
                background-position: 0% 50%;
                filter: brightness(1);
            }
            50% {
                background-position: 100% 50%;
                filter: brightness(1.2);
            }
        }

        .button-inner {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #0A1E3C 0%, #0C2445 100%);
            margin: 3px;
            clip-path: polygon(
                17px 0%, 
                100% 0%, 
                100% calc(100% - 17px), 
                calc(100% - 17px) 100%, 
                0% 100%, 
                0% 17px
            );
        }

        .button-text {
            font-family: 'Arial', sans-serif;
            font-size: 28px;
            font-weight: bold;
            color: #05D4F4;
            text-transform: uppercase;
            letter-spacing: 3px;
            text-shadow: 
                0 0 10px rgba(5, 212, 244, 0.8),
                0 0 20px rgba(5, 212, 244, 0.5),
                0 0 30px rgba(5, 212, 244, 0.3);
            transition: all 0.3s ease;
        }

        .accept-button:hover .button-text {
            color: #FFFFFF;
            text-shadow: 
                0 0 15px rgba(5, 212, 244, 1),
                0 0 30px rgba(5, 212, 244, 0.8),
                0 0 45px rgba(5, 212, 244, 0.6);
            transform: scale(1.05);
        }

        /* Pulsing effect */
        .button-pulse {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100%;
            height: 100%;
            border: 2px solid #05D4F4;
            clip-path: polygon(
                20px 0%, 
                100% 0%, 
                100% calc(100% - 20px), 
                calc(100% - 20px) 100%, 
                0% 100%, 
                0% 20px
            );
            animation: pulse 2s ease-out infinite;
        }

        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(1.1);
                opacity: 0;
            }
        }

        /* Corner accents */
        .corner-accent {
            position: absolute;
            width: 30px;
            height: 30px;
            border: 2px solid #05D4F4;
        }

        .corner-tl {
            top: -2px;
            left: -2px;
            border-right: none;
            border-bottom: none;
        }

        .corner-br {
            bottom: -2px;
            right: -2px;
            border-left: none;
            border-top: none;
        }

        /* Hover state */
        .accept-button:hover {
            transform: scale(1.02);
            filter: brightness(1.1);
        }

        .accept-button:hover .corner-accent {
            border-color: #FFFFFF;
            filter: drop-shadow(0 0 5px rgba(5, 212, 244, 1));
        }

        .accept-button:active {
            transform: scale(0.98);
        }

                        @media (max-width: 768px) {
            #play-button {
                flex-direction: column;
                gap: 15px;
            }
            
            .accept-button {
                width: 240px;
                height: 80px;
            }
            
            .decline-button {
                width: 140px;
                height: 60px;
            }
            
            .button-text {
                font-size: 22px;
                letter-spacing: 2px;
            }
            
            .decline-button .button-text {
                font-size: 18px;
            }
            
            .countdown-circle {
                left: -50px;
                width: 60px;
                height: 60px;
            }
            
            .countdown-number {
                font-size: 22px;
            }
            
            #league-title {
                top: 5vh;
            }
            
            .league-text {
                font-size: 2.2rem;
                letter-spacing: 2px;
            }

            #model-left, #model-right {
                width: 200px;
                height: 200px;
                top: 20vh;
            }

            #model-left {
                left: 2vw;
            }

            #model-right {
                right: 2vw;
            }
        }

        /* Particles and effects */
        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0;
            animation: particleFloat 12s infinite linear;
            filter: blur(0.5px);
        }

        .particle.gold {
            background: radial-gradient(circle, #ffd700 0%, #c89b3c 100%);
            box-shadow: 0 0 10px #ffd700;
        }

        .particle.blue {
            background: radial-gradient(circle, #43b7ff 0%, #1e90ff 100%);
            box-shadow: 0 0 10px #43b7ff;
        }

        .particle.purple {
            background: radial-gradient(circle, #932b8f 0%, #663399 100%);
            box-shadow: 0 0 10px #932b8f;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(100vh) translateX(-50px) rotate(0deg) scale(0);
                opacity: 0;
            }
            5% {
                opacity: 1;
                transform: translateY(95vh) translateX(-25px) rotate(45deg) scale(1);
            }
            95% {
                opacity: 1;
                transform: translateY(5vh) translateX(25px) rotate(315deg) scale(1);
            }
            100% {
                transform: translateY(-5vh) translateX(50px) rotate(360deg) scale(0);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="cursor" id="cursor"></div>
    
    <!-- League Title -->
    <div id="league-title">
        <h1 class="league-text" id="animated-title">League Of Quizing</h1>
    </div>
    
    <!-- Play Button -->
    <div id="play-button">
        <div class="accept-button">
            <div class="countdown-circle">
                <svg class="countdown-svg" viewBox="0 0 80 80">
                    <circle class="countdown-bg" cx="40" cy="40" r="35"></circle>
                    <circle class="countdown-progress" cx="40" cy="40" r="35"></circle>
                </svg>
                <div class="countdown-number">10</div>
            </div>
            <div class="button-pulse"></div>
            <div class="button-inner">
                <span class="button-text">ACCEPT</span>
            </div>
            <div class="corner-accent corner-tl"></div>
            <div class="corner-accent corner-br"></div>
        </div>
        <div class="decline-button">
            <div class="button-inner">
                <span class="button-text">DECLINE</span>
            </div>
            <div class="corner-accent corner-tl"></div>
            <div class="corner-accent corner-br"></div>
        </div>
    </div>
    
    <!-- 3D Models -->
    <div id="model-left"></div>
    <div id="model-right"></div>

    <script>
        // Custom cursor tracking
        const cursor = document.getElementById('cursor');
        let mouseX = 0, mouseY = 0;
        let cursorX = 0, cursorY = 0;

        document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });

        function animateCursor() {
            cursorX += (mouseX - cursorX) * 0.1;
            cursorY += (mouseY - cursorY) * 0.1;
            cursor.style.left = cursorX + 'px';
            cursor.style.top = cursorY + 'px';
            requestAnimationFrame(animateCursor);
        }
        animateCursor();

        // Simple 3D Model Setup - Responsive
        function createModel(containerId, shouldMirror = false) {
            const container = document.getElementById(containerId);
            const containerWidth = container.offsetWidth;
            const containerHeight = container.offsetHeight;
            
            // Scene setup
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, containerWidth / containerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
            
            renderer.setSize(800, 800);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);
            
            camera.position.z = 5;
            
            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffd700, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);
            
            // Load model
            const loader = new THREE.GLTFLoader();
            let model, mixer;
            const clock = new THREE.Clock();
            
            loader.load('./model1.glb',
                function(gltf) {
                    model = gltf.scene;
                    
                    // Setup animations
                    if (gltf.animations && gltf.animations.length > 0) {
                        mixer = new THREE.AnimationMixer(model);
                        gltf.animations.forEach((clip) => {
                            mixer.clipAction(clip).play();
                        });
                    }
                    
                    // Normal model scaling
                    const box = new THREE.Box3().setFromObject(model);
                    const size = box.getSize(new THREE.Vector3());
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 2.5 / maxDim; // Simple fixed scaling
                    model.scale.setScalar(scale);
                    
                    // Apply mirroring for right model
                    if (shouldMirror) {
                        model.scale.x *= -1; // Flip horizontally
                    }
                    
                    // Center model
                    const center = box.getCenter(new THREE.Vector3());
                    model.position.sub(center.multiplyScalar(scale));
                    
                    scene.add(model);
                    animate();
                },
                undefined,
                function(error) {
                    console.error('Error loading model for', containerId, error);
                    // Responsive fallback cube - proper size
                    const cubeSize = Math.min(containerWidth, containerHeight) * 0.004; // Smaller cubes too
                    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
                    const material = new THREE.MeshPhongMaterial({ color: 0xc89b3c });
                    model = new THREE.Mesh(geometry, material);
                    
                    // Apply mirroring for right model fallback
                    if (shouldMirror) {
                        model.scale.x = -1;
                    }
                    
                    scene.add(model);
                    animate();
                }
            );
            
            function animate() {
                requestAnimationFrame(animate);
                
                if (mixer) {
                    mixer.update(clock.getDelta());
                }
                
                renderer.render(scene, camera);
            }
            
            // Handle resize
            window.addEventListener('resize', () => {
                const newWidth = container.offsetWidth;
                const newHeight = container.offsetHeight;
                camera.aspect = newWidth / newHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(newWidth, newHeight);
            });
        }

        // Particle system - Fixed positioning
        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            const colors = ['gold', 'blue', 'purple'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            particle.classList.add(color);
            
            // Fix particle positioning
            particle.style.left = Math.random() * window.innerWidth + 'px';
            particle.style.width = particle.style.height = (Math.random() * 8 + 4) + 'px';
            particle.style.animationDelay = Math.random() * 12 + 's';
            document.body.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.remove();
                }
            }, 15000);
        }

        // Initialize everything
        window.addEventListener('load', function() {
            // Animate title letters individually
            const title = document.getElementById('animated-title');
            const text = title.textContent;
            title.innerHTML = '';
            
            text.split('').forEach((letter, i) => {
                const span = document.createElement('span');
                span.textContent = letter === ' ' ? '\u00A0' : letter;
                span.style.setProperty('--i', i);
                title.appendChild(span);
            });

            // Create glowing particles around title
            const titleContainer = document.getElementById('league-title');
            for (let i = 0; i < 6; i++) {
                const glow = document.createElement('div');
                glow.className = 'title-glow';
                glow.style.animationDelay = `${i * 1.67}s`;
                glow.style.width = glow.style.height = `${Math.random() * 4 + 2}px`;
                titleContainer.appendChild(glow);
            }

            // Countdown animation
            const countdownNumber = document.querySelector('.countdown-number');
            const countdownProgress = document.querySelector('.countdown-progress');
            let countdownValue = 10;
            
            function updateCountdown() {
                countdownValue--;
                if (countdownValue < 0) {
                    countdownValue = 10;
                    countdownNumber.classList.remove('warning', 'danger');
                }
                
                countdownNumber.textContent = countdownValue;
                
                // Change color based on time left
                if (countdownValue <= 3) {
                    countdownNumber.classList.add('danger');
                    countdownNumber.classList.remove('warning');
                } else if (countdownValue <= 5) {
                    countdownNumber.classList.add('warning');
                    countdownNumber.classList.remove('danger');
                } else {
                    countdownNumber.classList.remove('warning', 'danger');
                }
            }
            
            // Start countdown
            setInterval(updateCountdown, 1000);

            setTimeout(() => {
                console.log('Creating left model...');
                createModel('model-left', false); // Don't mirror left model
                
                setTimeout(() => {
                    console.log('Creating right model...');
                    createModel('model-right', true); // Mirror right model
                }, 1000);
                
                // Start particle system
                setInterval(createParticle, 300);
            }, 100);
        });
    </script>
</body>
</html>
