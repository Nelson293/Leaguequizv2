<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>League of Legends Quiz</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Arial', sans-serif;
            cursor: none;
        }

        body {
            background: 
                radial-gradient(circle at 30% 20%, rgba(200, 155, 60, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 70% 80%, rgba(67, 183, 255, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 20% 70%, rgba(147, 39, 143, 0.12) 0%, transparent 50%),
                radial-gradient(circle at 80% 30%, rgba(255, 215, 0, 0.08) 0%, transparent 70%),
                linear-gradient(135deg, #0a1428 0%, #1a1f2e 20%, #2d1b69 40%, #1e2328 60%, #3c3c41 80%, #0a1428 100%);
            background-size: 150% 150%, 120% 120%, 180% 180%, 200% 200%, 100% 100%;
            background-animation: gradientShift 20s ease-in-out infinite;
            position: relative;
            overflow: hidden;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 0%, 100% 100%, 0% 100%, 100% 0%, 0% 0%; }
            33% { background-position: 100% 0%, 0% 100%, 100% 100%, 0% 0%, 50% 50%; }
            66% { background-position: 0% 100%, 100% 0%, 0% 0%, 100% 100%, 100% 0%; }
        }

        /* Custom cursor */
        .cursor {
            position: fixed;
            width: 20px;
            height: 20px;
            background: radial-gradient(circle, rgba(200, 155, 60, 0.8) 0%, rgba(200, 155, 60, 0.2) 70%, transparent 100%);
            border-radius: 50%;
            pointer-events: none;
            z-index: 10000;
            transition: transform 0.1s ease;
            box-shadow: 0 0 20px rgba(200, 155, 60, 0.6);
        }

        /* League Title */
        #league-title {
            position: fixed;
            top: 3vh;
            left: 50%;
            transform: translateX(-50%);
            z-index: 101;
            pointer-events: none;
            text-align: center;
        }

        .title-frame {
            position: relative;
            padding: 40px 80px 50px 80px;
            background: 
                radial-gradient(ellipse at center, rgba(45, 55, 75, 0.4) 0%, rgba(25, 35, 50, 0.8) 70%, rgba(15, 20, 30, 0.95) 100%),
                linear-gradient(135deg, rgba(35, 45, 65, 0.9) 0%, rgba(20, 25, 40, 0.95) 100%);
            border: 4px solid transparent;
            border-radius: 25px;
            clip-path: polygon(10% 0%, 90% 0%, 100% 15%, 100% 85%, 90% 100%, 10% 100%, 0% 85%, 0% 15%);
            box-shadow: 
                0 0 30px rgba(0, 0, 0, 0.8),
                inset 0 4px 15px rgba(70, 85, 110, 0.3),
                inset 0 -4px 15px rgba(0, 0, 0, 0.7),
                0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .title-frame::before {
            content: '';
            position: absolute;
            top: -6px;
            left: -6px;
            right: -6px;
            bottom: -6px;
            background: 
                linear-gradient(45deg, 
                    rgba(85, 95, 115, 0.9) 0%, 
                    rgba(110, 125, 150, 0.95) 25%, 
                    rgba(130, 145, 170, 1) 50%, 
                    rgba(110, 125, 150, 0.95) 75%, 
                    rgba(85, 95, 115, 0.9) 100%
                );
            clip-path: polygon(10% 0%, 90% 0%, 100% 15%, 100% 85%, 90% 100%, 10% 100%, 0% 85%, 0% 15%);
            z-index: -1;
            animation: frameGlow 4s ease-in-out infinite alternate;
        }

        .title-frame::after {
            content: '';
            position: absolute;
            top: 8px;
            left: 20px;
            right: 20px;
            height: 6px;
            background: linear-gradient(90deg, transparent 0%, rgba(120, 135, 160, 0.6) 20%, rgba(150, 165, 190, 0.8) 50%, rgba(120, 135, 160, 0.6) 80%, transparent 100%);
            border-radius: 3px;
            animation: topHighlight 3s ease-in-out infinite alternate;
        }

        @keyframes frameGlow {
            0% {
                opacity: 0.7;
                filter: blur(1px);
            }
            100% {
                opacity: 1;
                filter: blur(0px);
            }
        }

        @keyframes topHighlight {
            0% {
                opacity: 0.4;
                transform: scaleX(0.8);
            }
            100% {
                opacity: 0.8;
                transform: scaleX(1);
            }
        }

        .league-text {
            font-family: 'Cinzel', 'Times New Roman', serif;
            font-size: 4rem;
            font-weight: 900;
            margin: 0;
            position: relative;
            z-index: 2;
            
            /* Authentic League Gold Effect */
            color: #1a1a1a;
            background: linear-gradient(
                45deg,
                #8B7355 0%,
                #A67C52 15%,
                #C8975F 30%,
                #DAA520 45%,
                #F4D03F 60%,
                #DAA520 75%,
                #A67C52 85%,
                #8B7355 100%
            );
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            
            /* Multiple text shadows for 3D depth - darker tones */
            text-shadow: 
                1px 1px 0px #5D4E3A,
                2px 2px 0px #4E3F2C,
                3px 3px 0px #3F301E,
                4px 4px 0px #302110,
                5px 5px 0px #211202,
                6px 6px 0px #120300,
                7px 7px 8px rgba(0, 0, 0, 0.6),
                0 0 20px rgba(218, 165, 32, 0.4),
                0 0 30px rgba(218, 165, 32, 0.2);
            
            letter-spacing: 2px;
            text-transform: uppercase;
            animation: textShine 4s ease-in-out infinite alternate;
        }

        @keyframes textShine {
            0% {
                filter: brightness(0.9) drop-shadow(0 0 15px rgba(218, 165, 32, 0.3));
                transform: perspective(1000px) rotateX(5deg);
            }
            100% {
                filter: brightness(1.1) drop-shadow(0 0 25px rgba(218, 165, 32, 0.5));
                transform: perspective(1000px) rotateX(-2deg);
            }
        }

        /* Ornate decorative elements - matching frame colors */
        .title-ornament {
            position: absolute;
            width: 30px;
            height: 30px;
            background: radial-gradient(circle, rgba(130, 145, 170, 0.8), rgba(85, 95, 115, 0.9));
            clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
            box-shadow: 0 0 10px rgba(130, 145, 170, 0.4);
        }

        .ornament-left {
            top: 50%;
            left: 15px;
            transform: translateY(-50%) rotate(45deg);
        }

        .ornament-right {
            top: 50%;
            right: 15px;
            transform: translateY(-50%) rotate(45deg);
        }

        /* 3D Model Containers */
        #model-left {
            position: fixed;
            left: 8vw;
            top: 15vh;
            width: 300px;
            height: 300px;
            z-index: 99;
        }

        #model-right {
            position: fixed;
            right: 8vw;
            top: 15vh;
            width: 300px;
            height: 300px;
            z-index: 99;
        }

        /* Play Button */
        #play-button {
            position: fixed;
            top: 50vh;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 102;
            cursor: pointer;
            transition: all 0.3s ease;
            animation: playButtonFloat 3s ease-in-out infinite;
        }

        #play-button:hover {
            transform: translate(-50%, -50%) scale(1.1);
            filter: brightness(1.2) drop-shadow(0 0 20px rgba(200, 155, 60, 0.8));
        }

        #play-button img {
            width: 150px;
            height: auto;
            filter: drop-shadow(0 0 15px rgba(0, 0, 0, 0.5));
        }

        @keyframes playButtonFloat {
            0%, 100% {
                transform: translate(-50%, -50%) translateY(0px);
            }
            50% {
                transform: translate(-50%, -50%) translateY(-10px);
            }
        }

        @media (max-width: 768px) {
            #play-button img {
                width: 120px;
            }
        }
            #league-title {
                top: 5vh;
            }
            
            .title-frame {
                padding: 25px 40px 35px 40px;
                clip-path: polygon(8% 0%, 92% 0%, 100% 12%, 100% 88%, 92% 100%, 8% 100%, 0% 88%, 0% 12%);
            }
            
            .league-text {
                font-size: 2.8rem;
                letter-spacing: 1px;
            }
            
            .title-ornament {
                width: 20px;
                height: 20px;
            }

            #model-left, #model-right {
                width: 200px;
                height: 200px;
                top: 20vh;
            }

            #model-left {
                left: 2vw;
            }

            #model-right {
                right: 2vw;
            }
        }

        /* Particles and effects */
        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0;
            animation: particleFloat 12s infinite linear;
            filter: blur(0.5px);
        }

        .particle.gold {
            background: radial-gradient(circle, #ffd700 0%, #c89b3c 100%);
            box-shadow: 0 0 10px #ffd700;
        }

        .particle.blue {
            background: radial-gradient(circle, #43b7ff 0%, #1e90ff 100%);
            box-shadow: 0 0 10px #43b7ff;
        }

        .particle.purple {
            background: radial-gradient(circle, #932b8f 0%, #663399 100%);
            box-shadow: 0 0 10px #932b8f;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(100vh) translateX(-50px) rotate(0deg) scale(0);
                opacity: 0;
            }
            5% {
                opacity: 1;
                transform: translateY(95vh) translateX(-25px) rotate(45deg) scale(1);
            }
            95% {
                opacity: 1;
                transform: translateY(5vh) translateX(25px) rotate(315deg) scale(1);
            }
            100% {
                transform: translateY(-5vh) translateX(50px) rotate(360deg) scale(0);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="cursor" id="cursor"></div>
    
    <!-- League Title -->
    <div id="league-title">
        <div class="title-frame">
            <div class="title-ornament ornament-left"></div>
            <h1 class="league-text">League Of Quizing</h1>
            <div class="title-ornament ornament-right"></div>
        </div>
    </div>
    
    <!-- Play Button -->
    <div id="play-button">
        <img src="./playbutton.png" alt="Play Button">
    </div>
    
    <!-- 3D Models -->
    <div id="model-left"></div>
    <div id="model-right"></div>

    <script>
        // Custom cursor tracking
        const cursor = document.getElementById('cursor');
        let mouseX = 0, mouseY = 0;
        let cursorX = 0, cursorY = 0;

        document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });

        function animateCursor() {
            cursorX += (mouseX - cursorX) * 0.1;
            cursorY += (mouseY - cursorY) * 0.1;
            cursor.style.left = cursorX + 'px';
            cursor.style.top = cursorY + 'px';
            requestAnimationFrame(animateCursor);
        }
        animateCursor();

        // Simple 3D Model Setup
        function createModel(containerId) {
            const container = document.getElementById(containerId);
            
            // Scene setup
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
            
            renderer.setSize(300, 300);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);
            
            camera.position.z = 5;
            
            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffd700, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);
            
            // Load model
            const loader = new THREE.GLTFLoader();
            let model, mixer;
            const clock = new THREE.Clock();
            
            loader.load('./model1.glb',
                function(gltf) {
                    model = gltf.scene;
                    
                    // Setup animations
                    if (gltf.animations && gltf.animations.length > 0) {
                        mixer = new THREE.AnimationMixer(model);
                        gltf.animations.forEach((clip) => {
                            mixer.clipAction(clip).play();
                        });
                    }
                    
                    // Scale model
                    const box = new THREE.Box3().setFromObject(model);
                    const size = box.getSize(new THREE.Vector3());
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 3 / maxDim;
                    model.scale.setScalar(scale);
                    
                    // Center model
                    const center = box.getCenter(new THREE.Vector3());
                    model.position.sub(center.multiplyScalar(scale));
                    
                    scene.add(model);
                    animate();
                },
                undefined,
                function(error) {
                    console.error('Error loading model for', containerId, error);
                    // Fallback cube
                    const geometry = new THREE.BoxGeometry(2, 2, 2);
                    const material = new THREE.MeshPhongMaterial({ color: 0xc89b3c });
                    model = new THREE.Mesh(geometry, material);
                    scene.add(model);
                    animate();
                }
            );
            
            function animate() {
                requestAnimationFrame(animate);
                
                if (mixer) {
                    mixer.update(clock.getDelta());
                }
                
                renderer.render(scene, camera);
            }
        }

        // Particle system
        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            const colors = ['gold', 'blue', 'purple'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            particle.classList.add(color);
            
            particle.style.left = Math.random() * 100 + 'vw';
            particle.style.width = particle.style.height = (Math.random() * 8 + 4) + 'px';
            particle.style.animationDelay = Math.random() * 12 + 's';
            document.body.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.remove();
                }
            }, 15000);
        }

        // Initialize everything
        window.addEventListener('load', function() {
            setTimeout(() => {
                console.log('Creating left model...');
                createModel('model-left');
                
                setTimeout(() => {
                    console.log('Creating right model...');
                    createModel('model-right');
                }, 1000);
                
                // Start particle system
                setInterval(createParticle, 300);
            }, 100);
        });
    </script>
</body>
</html>
